:javascript
  // Function that will take all selected students of a module when the remove button is pressed,
  // and place them on the content of the removal modal
  function prepareRemoveStudents(button) {
    var section = button.closest('.list-card');
    var selectedCheckboxes = section.querySelectorAll('.form-check-input:checked'); // Get all checked checkboxes

    var modal = document.querySelector('#removeStudentsModal');
    var modalBody = modal.querySelector('.modal-body');
    var modalFooter = document.querySelector('.modal-footer');

    selectedStudentCount = selectedCheckboxes.length

    var selectedStudentEmails = [];

    // get all the email values for the associated
    selectedCheckboxes.forEach(function(checkbox) {
      var row = checkbox.closest('tr');
      var email = row.querySelectorAll('td')[2].textContent.trim();
      selectedStudentEmails.push(email);
    });

    var cancelButton = modalFooter.querySelector('.btn:nth-child(1)');
    var removeButton = modalFooter.querySelector('.btn:nth-child(2)');

    if (selectedStudentCount === 0) {
      modalBody.textContent = "Please select students to remove.";

      // Hide "REMOVE" button, make "CANCEL" primary
      removeButton.classList.add("display-none")
      cancelButton.classList.remove("btn-secondary")
      cancelButton.classList.add("btn-primary")
      cancelButton.textContent = "OK"

    } else {
      modalBody.innerHTML = "Remove the following students?<br>" + selectedStudentEmails.join("<br>");

      //Show both buttons normally
      cancelButton.classList.remove("btn-primary")
      cancelButton.classList.add("btn-secondary")
      cancelButton.textContent = "Cancel"

      removeButton.classList.remove("display-none")
      removeButton.textContent = "Yes, remove them"

    }
  }

-# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
-# NOTE TO SELF!!!!!!!!!!!!!
-# When you click on a table row, it will have an associated student (from @students), so can pass that to the controller then
-# send THAT data back to the controller to delete said students
-# This is to prevent the email being inspect-elemented and then when you go to delete it, it wont be a valid email
-# EG IN CONTROLLER:
-# @selected_students = [[], [], []],  where the number of sub-arrays is dependant on how many modules the page will display
-# IN VIEW:
-# When checkbox gets checked, you add the associated @student.email to the corresponding @selected_students index
-# And do the the same but with removal for unchecking the box

= render 'components/accordion/container' do
  = render 'student-list-box', title: "COM2420 Software Hut"
  = render 'student-list-box', title: "COM2108 Functional Programming"
  = render 'student-list-box', title: "COM2108 Functional Programming"

.modal.fade#removeStudentsModal{tabindex: "-1", "aria-labelledby": "removeStudentsModal", "aria-hidden": "true"}
  .modal-dialog.modal-dialog-centered.modal-dialog-scrollable
    .modal-content
      .modal-header
        %h1.modal-title.fs-5#removeStudentsModal Remove Students from Module
        %button.btn-close{"aria-label": "Close", "data-bs-dismiss": "modal", type: "button"}
      .modal-body

      .modal-footer
        %button.btn.btn-secondary{"data-bs-dismiss": "modal", type: "button"} Cancel
        %button.btn.btn-primary{type: "button"} Yes, remove them

= render 'components/modal-search-multiple',
  modal_id: 'addStudentsModal',
  title: 'Add Students',
  prompt: 'Input students name',
  form_input_id: 'new-module-student-name',
  form_input_name: 'module_student_name',
  current_selection_text: 'current selection',
  list_group_id: 'student-selection-group',
  confirm_text: 'Confirm',
  confirm_onclick_function: ""

:javascript
  selected_rows = {}
  last_selected_card = null

  // event that fires for each row
  incrementing_id = 0
  document.querySelectorAll('.accordion-element').forEach((card) => {
    card.querySelector('.card-header').addEventListener('click', (event) => {
      last_selected_card = event.target.id
    })

    content = card.querySelectorAll('.list-card .table tbody tr')
    content.forEach((row) => {
      row.id = "id_" + incrementing_id++;

      row.addEventListener('click', (event) => {
        // Check if the clicked element is not an input
        if (event.target.tagName !== 'INPUT') {
          var checkbox = row.querySelector('.form-check-input');

          current_card = row.closest('.accordion-element').querySelector('.card-header').id
          //if (last_selected_card !== current_card) {
          //  content.forEach((row2) => {
          //    var other_checkbox = row2.querySelector('.form-check-input');
          //    console.log( other_checkbox.checked)
          //    other_checkbox.checked = false
          //  })
          //  selected_rows = []
          //  last_selected_card = current_card
          //}

          if (!checkbox.checked) {
            if (selected_rows[current_card] == null) {
              selected_rows[current_card] = []
            }
            selected_rows[current_card].push(row.id)
          } else {
            selected_rows[current_card] = selected_rows[current_card].filter(item => item !== row.id)
          }

          // Toggle checkbox state
          checkbox.checked = !checkbox.checked;

          console.log(selected_rows, last_selected_card, current_card)

          if (selected_rows[current_card].length > 0) {

          } else {

          }
        }
      });
    });
  })

