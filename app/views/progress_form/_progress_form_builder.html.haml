
%h1= title

%hr.divider

%h2 Settings
.row.align-items-center
  .col
    .form-check.form-switch
      %input.form-check-input{ type: "checkbox", id: "attendance-checkbox", checked: @progress_form_json["attendance"] }
      %label.form-check-label{ for: "attendance-checkbox" }= "Require attendance?"

  .col-auto
    %label{for: "release-date-input"} Release Date
    %input.form-control#release-date-input{type: "date", value: @progress_form_json["release_date"]}
    %small.text-danger.d-none#release-date-input-error Must set a release date

%hr.divider

#progress-form-partial-container
  = render partial: "progress_form", locals: {progress_form: @progress_form_json, progress_response: nil, group: "None", facilitator: false, editing_form: true}

.modal.fade{ id: "add-question-modal", tabindex: "-1", "aria-labelledby": "add-question-modal", "aria-hidden": "true", "data-disallow-confirm-empty-input": "" }
  .modal-dialog.modal-dialog-centered.modal-dialog-scrollable
    .modal-content
      .modal-header
        %h1.modal-title.fs-5= "Add new question"
        %button.btn-close#add-question-close-button{ "aria-label": "Close", "data-bs-dismiss": "modal", type: "button" }

      .modal-body
        .form-group
          %textarea.form-control#question-text-area{placeholder: "What is the weather like today?", required: true}
          %small.text-danger.d-none#question-text-area-error Question cannot be empty

      .modal-footer
        %button.btn.btn-primary{ type: "submit", id: "add-question-button"}= "Add"

%button.btn.btn-outline-primary.w-100{type: "button", id: "create-question-button", "data-bs-toggle": "modal", "data-bs-target": "#add-question-modal"}
  %i.bi.bi-plus-circle-fill
  Add new question 

.mb-2
  %button.btn.btn-success.mt-2#save-button{type: "button"}
    %i.bi.bi-floppy
    Save

  %button.btn.btn-danger.mt-2#delete-button{type: "button"}
    %i.bi.bi-trash
    Delete

:javascript
  // Helpers
  function dateToYYYYMMDD(date) {
    // Helper for parsing a date object into a min object
    var dd = date.getDate();
    var mm = date.getMonth() + 1; // January is 0
    var yyyy = date.getFullYear();

    if(dd < 10) { dd = '0' + dd } 
    if(mm < 10) { mm = '0' + mm } 

    return yyyy + '-' + mm + '-' + dd;
  }

  document.addEventListener("DOMContentLoaded", function() {
    // Only display today and future times for the release date
    var minReleaseDate = new Date();
    minReleaseDate.setDate(minReleaseDate.getDate()); // TODO: I am allowing it set to today for instant release 

    // Set min attribute of date input to current date
    const releaseDateInput = document.getElementById("release-date-input");
    releaseDateInput.min = dateToYYYYMMDD(minReleaseDate);

    // Add question events
    const addQuestionBtn = document.getElementById("add-question-button");
    const questionsContainer = document.getElementById("questions-container");

    addQuestionBtn.addEventListener("click", function(e) {
      let questionsTextArea = document.getElementById("question-text-area");
      let questionsTextAreaError = document.getElementById("question-text-area-error");

      if (questionsTextArea.value.trim() === "") {
        // TODO: Show cannot be empty... Or is this done on controller?
        questionsTextArea.classList.add("is-invalid");
        questionsTextAreaError.classList.remove("d-none")

        return; 
      }
      questionsTextArea.classList.remove("is-invalid");
      questionsTextAreaError.classList.add("d-none")

      fetch("/progress_form/add_question", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-CSRF-Token": document.querySelector("meta[name='csrf-token']").getAttribute("content")
        },
        body: JSON.stringify({ 
          question: questionsTextArea.value.trim(),
        })
      })
      .then(response => response.text())
      .then(html => {
        //const temp = document.createElement("div");
        //temp.innerHTML = html.trim();
        //questionsContainer.appendChild(temp);
        
        //document.getElementById("questions-container").innerHTML = html;
        
        document.getElementById("progress-form-partial-container").innerHTML = html;
        document.getElementById("question-text-area").value = "";


      })
      .catch(error => console.error("Error when trying to add question:", error));

      // This is the only way I could figure out how to close the modal and play the animation
      document.getElementById("add-question-close-button").click();
    });

    // Save form events
    const saveBtn = document.getElementById("save-button");
    saveBtn.addEventListener("click", function(e) {
      // Check data is filled in on client side and show errors
      // TODO: Should also be done in the controller... or, should it all be done in controller and this should
      //       be done from ajax response?
      let dataInvalid = false;

      let releaseDateInputError = document.getElementById("release-date-input-error");
      
      if (releaseDateInput.value === "") {
        // Show that it cannot be empty
        releaseDateInput.classList.add("is-invalid");
        releaseDateInputError.classList.remove("d-none");

        return;
      }
      else {
        releaseDateInput.classList.remove("is-invalid");
        releaseDateInputError.classList.add("d-none");
      }
       
      fetch("/progress_form/save_form", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-CSRF-Token": document.querySelector("meta[name='csrf-token']").getAttribute("content")
        },
        body: JSON.stringify({ 
          // TEMP: This can be empty for now I believe, will need to pass in date etc after
          "release_date": releaseDateInput.value,
          "attendance": document.getElementById("attendance-checkbox").checked
        })
      })
      .then(response => response.json())
      .then(json => {
        // Handle response
        if (json["status"] == "success") {
          window.location.href = json["redirect"];
        }
        else {
          alert("Failed to save progress form, if this error persists, please contact an admin.");
        }
      })
      .catch(error => console.error("Error when trying to save form:", error));
    });

    // Delete form events
    const deleteBtn = document.getElementById("delete-button");
    deleteBtn.addEventListener("click", function(e) {
      fetch("/progress_form/delete_form", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-CSRF-Token": document.querySelector("meta[name='csrf-token']").getAttribute("content")
        },
        body: JSON.stringify({ 
          "release_date": releaseDateInput.value,
        })
      })
      .then(response => response.json())
      .then(json => {
        // Handle response
        if (json["status"] == "success") {
          window.location.href = json["redirect"];
        }
        else {
          alert("Failed to delete progress form, if this error persists, please contact an admin.");
        }
      })
      .catch(error => console.error("Error when trying to delete form:", error));
    });
  });