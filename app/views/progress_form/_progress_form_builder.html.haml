-# This file is a part of Projman, a group project orchestrator and management system,
-# made by Team 5 for the COM3420 module [Software Hut] at the University of Sheffield.

.fs-2.semi-bold= title

.fs-4.semi-bold Settings
.row.align-items-center
  .col
    .form-check.form-switch
      %input.form-check-input{ type: "checkbox", id: "attendance-checkbox", checked: @progress_form_json["attendance"] }
      %label.form-check-label{ for: "attendance-checkbox" }= "Require attendance?"

  .col-auto
    %label{for: "release-date-input"} Release Date
    - html_formatted_release_date = ""
    - unless @progress_form_deadline.nil? || @progress_form_deadline == ""
      - html_formatted_release_date = @progress_form_deadline.strftime("%Y-%m-%dT%H:%M")

    %input.form-control#release-date-input{type: "datetime-local", value: html_formatted_release_date}
    %small.text-danger.d-none#release-date-input-error Must set a release date

%hr.divider

#progress-form-partial-container
  = render partial: "progress_form", locals: {progress_form: @progress_form_json, release_date: @progress_form_deadline, progress_response: nil, group: "None", facilitator: false, editing_form: true}

.modal.fade{ id: "add-question-modal", tabindex: "-1", "aria-labelledby": "add-question-modal", "aria-hidden": "true", "data-disallow-confirm-empty-input": "" }
  .modal-dialog.modal-dialog-centered.modal-dialog-scrollable
    .modal-content
      .modal-header
        %h1.modal-title.fs-5= "Add new question"
        %button.btn-close#add-question-close-button{ "aria-label": "Close", "data-bs-dismiss": "modal", type: "button" }

      = form_with(url: "add_question", method: :post, local: false, id: "add-question-form") do |form|
        .modal-body
          .form-group
            = form.text_area :question, class: "form-control", required: true, placeholder: "What is the weather like today?", id: "question-text-area"
            %small.text-danger.d-none#question-text-area-error Question cannot be empty

        .modal-footer
          = form.submit "Add", class: "btn btn-primary", id: "add-question-button"

%button.btn.btn-outline-primary.w-100{type: "button", id: "create-question-button", "data-bs-toggle": "modal", "data-bs-target": "#add-question-modal"}
  %i.bi.bi-plus-circle-fill
  Add new question

%small.text-danger.d-none#questions-error Must add a question

.d-flex.pb-3
  %div
    %button.btn.btn-success.mt-2#save-button{type: "button"}
      %i.bi.bi-floppy
      Save

  %div.ms-1
    = form_with(url: "delete_form", method: :post, local: true, id: "delete-form") do |form|
      = button_tag type: "submit", class: "btn btn-danger mt-2", id: "delete-button" do
        %i.bi.bi-trash
        Delete

:javascript
  // Helpers
  function dateToYYYYMMDDHHMM(date) {
    // Helper for parsing a date object to be used for min
    const year = date.getFullYear();
    const month = (date.getMonth() + 1).toString().padStart(2, "0");
    const day = date.getDate().toString().padStart(2, "0");
    const hours = date.getHours().toString().padStart(2, "0");
    const minutes = date.getMinutes().toString().padStart(2, "0");

    return `${year}-${month}-${day}T${hours}:${minutes}`;
  }

  document.addEventListener("DOMContentLoaded", function() {
    // Only display today and future times for the release date
    var minReleaseDate = new Date();
    minReleaseDate.setDate(minReleaseDate.getDate());

    // Set min attribute of date input to current date
    const releaseDateInput = document.getElementById("release-date-input");
    releaseDateInput.min = dateToYYYYMMDDHHMM(minReleaseDate);

    // Save form events
    const saveBtn = document.getElementById("save-button");
    const createQuestionButton = document.getElementById("create-question-button");
    const questionsError = document.getElementById("questions-error");
    saveBtn.addEventListener("click", function(e) {
      // Show any basic data validation errors
      let dataInvalid = false;

      let releaseDateInputError = document.getElementById("release-date-input-error");

      if (releaseDateInput.value === "") {
        // Show that it cannot be empty
        releaseDateInput.classList.add("is-invalid");
        releaseDateInputError.classList.remove("d-none");
        return;
      }
      else {
        releaseDateInput.classList.remove("is-invalid");
        releaseDateInputError.classList.add("d-none");
      }

      fetch("save_form", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-CSRF-Token": document.head.querySelector("meta[name=csrf-token]")?.content
        },
        body: JSON.stringify({
          "release_date": releaseDateInput.value,
          "attendance": document.getElementById("attendance-checkbox").checked
        })
      })
      .then(response => response.json())
      .then(json => {
        if (json["status"] === "success") {
          window.location.href = json["redirect"];
        }
        else {
          if (json["message"] === "no_questions") {
            createQuestionButton.classList.remove("btn-outline-primary");
            createQuestionButton.classList.add("btn-outline-danger");

            questionsError.classList.remove("d-none");
          }
          else {
            alert(json["message"]);
          }

          if (json["status"] === "already_released") {
            window.location.href = json["redirect"];
          }
        }
      })
      .catch(error => console.error("Error when trying to save form:", error));
    });

    document.getElementById("add-question-form").addEventListener("submit", function(e) {
      // When we submit the form, we add a question, so remove any no questions errors.
      questionsError.classList.add("d-none");

      createQuestionButton.classList.add("btn-outline-primary");
      createQuestionButton.classList.remove("btn-outline-danger");
    });
  });