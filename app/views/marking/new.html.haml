-# This file is a part of Projman, a group project orchestrator and management system,
-# made by Team 5 for the COM3420 module [Software Hut] at the University of Sheffield.

%h2.fs-3= @mark_scheme_project.name + " - " + @section["title"]
%hr.divider
%h2.fs-4= "Description"
%pre{style: "font-family: inherit;"}= @section["description"]

%hr.divider
- max_marks = @section["max_marks"]

%table.table.table-bordered.table-hover#markingTable
  %thead
    %tr
      %th.bg-light Team
      %th.bg-light= "Marks Given (" + @section["max_marks"].to_s + " Available)"
      %th.bg-light Reasoning
  %tbody
    - @assigned_teams.each do |team|
      %tr
        - response = @team_marks.select do |tm| tm.json_data["group_id"] == team.id end.first
        - unless response.nil?
          - data = response.json_data["sections"][@section["title"]]
          - unless data.nil?
            - marks = data["marks_given"]
            - reason = data["reason"]

        %td= team.name
        %td.editable.onlynumeric.marks-input{id: "marks-input-#{team.id}", contenteditable: "true"}= marks
        %td.editable{id: "reason-input-#{team.id}", contenteditable: "true"}= reason

.modal.fade#markErrorModal{role: "dialog"}
  .modal-dialog.modal-dialog-centered.modal-dialog-scrollable
    .modal-content
      .modal-header
        %h4.modal-title Invalid Marks Given

      .modal-body
        %p The maximum number of marks was exceeded, please check your marking.

      .modal-footer
        %button.btn.btn-default.close{type: "close", "aria-label" => "Close", "data-bs-dismiss" => "modal"} Close

:javascript
  document.addEventListener('DOMContentLoaded', function() {
    var cells = document.querySelectorAll('#markingTable .editable.onlynumeric');
    let markErrorModal = document.getElementById("markErrorModal");

    let MAX_MARKS_TEMP = #{max_marks};

    cells.forEach(function(cell) {
      ["keypress", "keyup"].forEach(function(e) {
        cell.addEventListener(e, function() {
          var keyValue = String.fromCharCode(event.keyCode || event.which);

          if (/\D/.test(keyValue)) {
            event.preventDefault();
          }
        })
      });
      cell.addEventListener("blur", function() {
        // When the user clicks off a cell, remove all nonnumeric characters
        cell.innerHTML = cell.innerHTML.replace(/[^\d].+/, '');

        if (!cell.innerHTML) {
          return;
        }

        // Alert the user if the cell exceeds the maximum marks
        if (Number(cell.innerHTML) > MAX_MARKS_TEMP) {
          cell.classList.add("bg-danger");
          $("#markErrorModal").modal("show");
        }
        else {
          cell.classList.remove("bg-danger");
        }
      })
    });

    document.getElementById("saveButton").onclick = function () {
      // Validate marks on the client side as well as server side for better error display.
      let dataInvalid = false;

      cells.forEach(function(cell) {
        if (Number(cell.innerHTML) > MAX_MARKS_TEMP) {
          cell.classList.add("bg-danger");
          dataInvalid = true;
        }
        else {
          cell.classList.remove("bg-danger");
        }
      });

      if (dataInvalid) {
        $("#markErrorModal").modal("show");
        return;
      }

      // Read marking from inputs
      marking = {}
      document.querySelectorAll(".marks-input").forEach(function(element) {
        id = element.id.replace("marks-input-", "");

        marks = element.innerHTML;

        reason = document.getElementById(`reason-input-${id}`).innerHTML;

        marking[id] = [marks, reason];
      });

      fetch("/markings/save", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-CSRF-Token": document.head.querySelector("meta[name=csrf-token]")?.content
        },
        body: JSON.stringify({
          marking: marking
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data["status"] === "error") {
          //alert("Something went wrong...");
          alert(data["message"]);
        }
        else {
          window.location.href = data["redirect"];
        }
      })
      .catch(error => console.error('Error when updating marking:', error));

    };


    $("#markErrorModal").on("click", function(){
      $("#markErrorModal").modal("hide");
    });

    $("#cancelButton").on("click", function() {
      // To cancel the changes, just redirect back.
      window.location.href = "#{markings_path}";
    });
  });


%button.btn.btn-success.mb-3#saveButton
  %i.bi.bi-floppy
  Save

%button.btn.btn-danger.mb-3#cancelButton
  %i.bi.bi-trash
  Discard