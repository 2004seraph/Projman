-# This file is a part of Projman, a group project orchestrator and management system,
-# made by Team 5 for the COM3420 module [Software Hut] at the University of Sheffield.

.fs-3.semi-bold= title

%hr.divider

#sections-container
    = render partial: "mark_scheme", locals: {sections: session[:mark_scheme]["sections"]}

.modal.fade{ id: "add-section-modal", tabindex: "-1", "aria-labelledby": "add-section-modal", "aria-hidden": "true", "data-disallow-confirm-empty-input": "" }
    .modal-dialog.modal-dialog-centered.modal-dialog-scrollable
        .modal-content
            .modal-header
                %h1.modal-title.fs-5= "Add new section"
                %button.btn-close#add-section-close-button{ "aria-label": "Close", "data-bs-dismiss": "modal", type: "button" }

            = form_with(url: "add_section", method: :post, local: false, id: "add-section-form") do |form|
                .modal-body
                    .form-group
                        = form.text_area :section_title, class: "form-control", required: true, placeholder: "Section title", id: "section-title-text-area"
                        %small.text-danger.d-none#section-title-text-area-error

                .modal-footer
                    = form.submit "Add", class: "btn btn-primary", id: "add-section-button"


%button.btn.btn-outline-primary.w-100{type: "button", id: "create-section-button", "data-bs-toggle": "modal", "data-bs-target": "#add-section-modal"}
    %i.bi.bi-plus-circle-fill
    Add new section

.mb-2
    %button.btn.btn-success.mt-2#save-button{type: "button"}
        %i.bi.bi-floppy
        Save

    %button.btn.btn-danger.mt-2#discard-button{type: "button"}
        %i.bi.bi-trash
        Discard Changes

:javascript
    document.addEventListener("DOMContentLoaded", function() {
        // Save form events
        const saveBtn = document.getElementById("save-button");
        saveBtn.addEventListener("click", function(e) {
            // Get all sections
            sections = [];
            document.querySelectorAll(".max-marks-input").forEach(function(element) {
                section_index = element.id.replace("maximum-marks-input-", "");
                max_marks = element.value;

                title = document.getElementById(`section-title-${section_index}`).innerHTML.trim()
                description = document.getElementById(`description-textarea-${section_index}`).value.trim();
                sections.push({"title": title, "description": description, "max_marks": max_marks});
            });

            fetch("save", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-CSRF-Token": document.head.querySelector("meta[name=csrf-token]")?.content
                    },
                body: JSON.stringify({
                    sections: sections
                })
            })
            .then(response => response.json())
            .then(json => {
                // Handle response
                if (json["status"] == "success") {
                    window.location.href = json["redirect"];
                }
                else {
                    alert("Failed to save mark scheme, if this error persists, please contact an admin.");
                }
            })
            .catch(error => console.error("Error when trying to save mark scheme:", error));
        });


        // Delete form events
        $("#discard-button").on("click", function() {
            // Simple redirect
            window.location.href = "#{project_mark_scheme_index_path}";
        });
    });