-# This file is a part of Projman, a group project orchestrator and management system,
-# made by Team 5 for the COM3420 module [Software Hut] at the University of Sheffield.

- unique_id = "collapseIssue_#{SecureRandom.hex(4)}" # Generate a unique ID using SecureRandom

#pref-success-message.alert.alert-success{style: "display: none;"}
  Preference Form submitted successfully!

#pref-error-message.alert.alert-succes{style: "display: none; color: white; background-color: red;"}
  Invalid Form Input

= form_with(model: @milestone_response,url: "/projects/#{@current_project.id}/milestone_responses", method: "post", local: true, id: "preference-form") do |form|
  %h2.fs-4 Teammate Preference Form
  %h1
  %h1.fs-6.fw-normal.fst-italic= "Please enter the students preferred name and surname."
  %hr.divider
  .form-group
    - hidden_fields = {"project_id" => params[:id]}
    %h1.fs-5.fw-semibold Preferred Teammates
    - @yes_mates.times do |i|
      = render 'components/search-with-dropdown',
          form_input_id: "preferred_teammate_#{i}".to_sym,
          form_input_name: "preferred_teammate_#{i}".to_sym,
          data_search_autocomplete_method: defined?(search_student_name_projects_path) ? search_student_name_projects_path : "",
          hidden_fields: hidden_fields
      %h1
    %hr.divider
    %h1.fs-5.fw-semibold Avoided Teammates *
    %h1.fs-6.fw-normal.fst-italic= "Avoided teammates are not required."
    - @no_mates.times do |j|
      = render 'components/search-with-dropdown',
          form_input_id: "avoided_teammate_#{j}".to_sym,
          form_input_name: "avoided_teammate_#{j}".to_sym,
          data_search_autocomplete_method: defined?(search_student_name_projects_path) ? search_student_name_projects_path : "",
          hidden_fields: hidden_fields
      %h1
    %hr.divider
    %button.btn.btn-primary.btn-sm{ type: "submit" } Submit
    %h1

:javascript
  document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('preference-form').addEventListener('submit', function(event) {
      event.preventDefault();

      const form = this;
      const formData = new FormData(form);
      formData.append('milestone_id', #{@pref_form.id})

      fetch(form.action, {
        method: form.method,
        headers: {
          'X-CSRF-Token': document.querySelector("meta[name='csrf-token']").getAttribute("content")
        },
        body: formData
      })
      .then(response => {
        if (response.ok) {

          form.style.display = 'none';
          form.reset();
          document.getElementById('pref-success-message').style.display = 'block';
          setTimeout(function() {
            document.getElementById('pref-success-message').style.display = 'none';
            window.location.reload();
          }, 3000);

        } else {
          console.error('Invalid Form Entry');
          form.style.display = 'none';
          form.reset();
          document.getElementById('pref-error-message').style.display = 'block';
          setTimeout(function() {
            document.getElementById('pref-error-message').style.display = 'none';
            window.location.reload();
          }, 3000);
        }
      })
      .catch(error => {
        console.error('Error:', error);
      });
    });
  });